<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:file="http://www.springframework.org/schema/integration/file"
    xmlns:int="http://www.springframework.org/schema/integration" xmlns:jmx="http://www.springframework.org/schema/integration/jmx"
    xmlns:stream="http://www.springframework.org/schema/integration/stream"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file-2.0.xsd
		http://www.springframework.org/schema/integration/jmx http://www.springframework.org/schema/integration/jmx/spring-integration-jmx-2.0.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 
    ###########################################################################
                             SPRING FRAMEWORK CONFIGURATION
    ###########################################################################
     -->
<!--  TODO - decide whether we need to open this up a bit to a wider package.  -->
    <context:component-scan base-package="com.srchaven.siwa.splitters" />

    <bean id="systemInfo" class="com.srchaven.siwa.util.SystemInfo" />
 
    <bean id="applicationProperties"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <props>
                <prop key="channels.observationProcessingThreads">#{systemInfo.getNumProcessors()}</prop>            
            </props>
        </property>
        
        <property name="locations">
            <list>
                 <value>classpath:paths.properties</value>
                 <value>classpath:database.properties</value>
            </list>
        </property>
    </bean>
    

    <!-- 
    ###########################################################################
                             DATABASE CONFIGURATION
    ###########################################################################
     -->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${database.driverClassName}" />
        <property name="url" value="${database.url}" />
        <property name="username" value="${database.username}" />
        <property name="password" value="${database.password}" />
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">

        <property name="dataSource">
            <ref bean="dataSource" />
        </property>

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                
                <!-- Uncomment for debugging output of hibernate calls -->
                <!-- <prop key="hibernate.show_sql">true</prop> -->
            </props>
        </property>
        
        <property name="packagesToScan" value="com.srchaven.siwa.model" />
    </bean>
    
    
    <!-- 
    ###########################################################################
                             DAO CONFIGURATION
    ###########################################################################
     -->
    <bean name="observationDao" class="com.srchaven.siwa.dao.ObservationDao">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- 
    ###########################################################################
                             SERVICE BEANS CONFIGURATION
    ###########################################################################
     -->
    <bean name="dbDumpPersister" class="com.srchaven.siwa.services.DatabaseDumpPersister" />
    
    <bean name="fileServices" class="com.srchaven.siwa.services.FileServices">
        <property name="archiveDirectory" value="${paths.archive}" />
        <property name="errorDirectory" value="${paths.error}" />
        <property name="processingDirectory" value="${paths.processing}" />
    </bean>

    <!-- 
    ###########################################################################
                             MONITORING CONFIGURATION
    ###########################################################################
     -->
    <jmx:mbean-export default-domain="com.srchaven.siwa" server="mbeanServer" />

    <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean" />

    <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
        <property name="port" value="1090" />
    </bean>

    <bean id="jmxAttributeSource"
        class="org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource" />

    <bean id="assembler"
        class="org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler">
        <property name="attributeSource" ref="jmxAttributeSource" />
    </bean>

    <bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean">
        <property name="objectName" value="connector:name=rmi" />
        <property name="serviceUrl"
            value="service:jmx:rmi://localhost/jndi/rmi://localhost:1090/myconnector" />
    </bean>
	

    <!-- 
    ###########################################################################
                             MESSAGING CONFIGURATION
    ###########################################################################
     -->

    <!--
        Keep a list in the header of all endpoints that the messages passes through. Used to determine what steps should
        be taken in the event of an error. The data be stored in the following header key:
        org.springframework.integration.history.MessageHistory.HEADER_NAME
    -->
    <int:message-history />



    <!-- 
        PART 1: Prepare files for processing
     -->
     
    <!-- Read files from the input directory -->
    <file:inbound-channel-adapter id="inputFileChannel"
        directory="${paths.input}" prevent-duplicates="true">
        <int:poller max-messages-per-poll="10" fixed-rate="100" />
    </file:inbound-channel-adapter>

    <!-- If there is an exception, pass the details to the file error channel -->
    <int:header-enricher input-channel="inputFileChannel" output-channel="applyTimestampChannel"
            default-overwrite="true">
        <int:error-channel ref="sourceFileErrorChannel" />
    </int:header-enricher>
    
    <int:channel id="applyTimestampChannel" />
    
    <!-- Rename the file to include a timestamp -->
    <int:service-activator ref="fileServices" method="addTimestampToFilename" input-channel="applyTimestampChannel"
        output-channel="archiveFileChannel" />
    
    <int:channel id="archiveFileChannel" />

    <!-- Copy file to archive directory -->
    <int:service-activator ref="fileServices" method="copyFileToArchiveDirectory" input-channel="archiveFileChannel"
        output-channel="moveFileToProcessingDirChannel" />
    
    <!-- Move file to processing directory -->
    <file:outbound-channel-adapter id="moveFileToProcessingDirChannel" directory="${paths.processing}"
        delete-source-files="true" />




    <!-- 
        PART 2: Process files
     -->
     
    <!-- Read files from the working directory -->
    <file:inbound-channel-adapter id="workingFileChannel"
        directory="${paths.processing}" prevent-duplicates="true"
        filename-regex="^[^.].*$">
        <int:poller max-messages-per-poll="10" fixed-rate="100" />
    </file:inbound-channel-adapter>

    <!-- If there is an exception, pass the details to the file error channel -->
    <int:header-enricher input-channel="workingFileChannel" output-channel="convertToStringChannel"
            default-overwrite="true">
        <int:error-channel ref="sourceFileErrorChannel" />
    </int:header-enricher>
    
    <int:channel id="convertToStringChannel" />

    <!-- Load the file into a string for further processing -->
    <file:file-to-string-transformer input-channel="convertToStringChannel" output-channel="fileSplitterChannel"/>
    
    <int:channel id="fileSplitterChannel" />

    <!-- Split the file into a list of raw observations -->
    <int:splitter id="fileToObservationSplitter" input-channel="fileSplitterChannel"
            output-channel="enrichObsErrorHeaderChannel">
        <bean class="com.srchaven.siwa.splitters.FileContentsToRawObservationSplitter" />
    </int:splitter>
    
    <int:channel id="enrichObsErrorHeaderChannel" />

    <!-- If there is an exception, pass the details to the observation error channel -->
    <int:header-enricher input-channel="enrichObsErrorHeaderChannel" output-channel="convertToObsChannel"
            default-overwrite="true">
        <int:error-channel ref="observationErrorChannel" />
    </int:header-enricher>
    
    <int:channel id="convertToObsChannel" />
    
    <!-- Transform the raw observation into an Observation object -->
    <int:transformer id="toObservationTransformer" input-channel="convertToObsChannel"
        output-channel="toFahrenheitTransformerChannel">
        <bean class="com.srchaven.siwa.transformers.RawObservationToObservationTransformer" />
    </int:transformer>

    <!-- This channel has an executor to allow parallel processing of the Observations -->
    <task:executor id="toFahrenheitTransformerChannelExecutor" pool-size="${channels.observationProcessingThreads}"
        queue-capacity="${channels.observationProcessingThreads}" rejection-policy="CALLER_RUNS" />
    <int:channel id="toFahrenheitTransformerChannel">
        <int:dispatcher task-executor="toFahrenheitTransformerChannelExecutor" />
    </int:channel>

    <!--  Convert the Observation's temperatures from Celsius to Fahrenheit -->
    <int:transformer id="toFahrenheitTransformer" input-channel="toFahrenheitTransformerChannel"
        output-channel="locationRedactorChannel">
        <bean class="com.srchaven.siwa.transformers.ToFahrenheitTransformer" />
    </int:transformer>

    <int:channel id="locationRedactorChannel" datatype="com.srchaven.siwa.model.Observation" />

    <!-- Redact location information if the Observation is from California -->
    <int:transformer id="locationRedactorTransformer"
        input-channel="locationRedactorChannel" output-channel="surfReportEnricherChannel">
        <bean class="com.srchaven.siwa.transformers.redactors.LocationRedactor" />
    </int:transformer>
	
    <int:channel id="surfReportEnricherChannel" />

    <!-- Add the supplemental surf report -->
    <int:transformer id="surfReportEnricher" input-channel="surfReportEnricherChannel"
        output-channel="golfReportEnricherChannel">
        <bean class="com.srchaven.siwa.transformers.enrichers.SurfReportEnricher" />
    </int:transformer>

    <int:channel id="golfReportEnricherChannel" />

    <!-- Add the supplemental golf report -->
    <int:transformer id="golfReportEnricher" input-channel="golfReportEnricherChannel"
        output-channel="observationPersistenceChannel">
        <bean class="com.srchaven.siwa.transformers.enrichers.GolfReportEnricher" />
    </int:transformer>

    <int:channel id="observationPersistenceChannel" />

    <!-- Persist the Observation by storing it in the database -->
    <int:service-activator id="databaseDumpPersister"
        input-channel="observationPersistenceChannel" output-channel="sourceFileDeletionObservationAggregatorChannel"
        ref="dbDumpPersister" method="persist" />

    <int:channel id="sourceFileDeletionObservationAggregatorChannel">
<!--        <int:interceptors>
            <int:wire-tap channel="logger" />
        </int:interceptors>-->
    </int:channel>
<!--    <int:logging-channel-adapter id="logger" level="DEBUG" log-full-message="true" />-->


<!-- TODO: There should be a header enricher here to change to a new error channel. From the aggregator on we aren't at the observation level anymore -->
    <!-- Aggregate all of the Observations from the same file -->
    <int:aggregator id="sourceFileDeletionObservationAggregator"
        input-channel="sourceFileDeletionObservationAggregatorChannel"
        output-channel="badObsOutputChannel"
        send-partial-result-on-expiry="false" send-timeout="1000">
        <bean class="com.srchaven.siwa.aggregators.ObservationAggregator" />
    </int:aggregator>
<!-- TODO Add this back into the aggregator, but with a better error channel: discard-channel="sourceFileErrorChannel" -->

    <int:channel id="badObsOutputChannel" />

    <int:service-activator id="badObsOutputter" input-channel="badObsOutputChannel"
        output-channel="sourceFileDeletionChannel">
        <bean class="com.srchaven.siwa.services.BadObservationOutputter" />
    </int:service-activator>

    <int:channel id="sourceFileDeletionChannel" />
    
    <!-- Delete the source file from the processing directory -->
    <int:service-activator id="sourceFileDeleter" input-channel="sourceFileDeletionChannel"
        output-channel="nullChannel" ref="fileServices" method="deleteSourceFile" />



    <!--
        Error handling 
     -->

    <!-- BEGIN File-level error handling -->
    <int:channel id="sourceFileErrorChannel" />
    
    <!-- Convert the incoming object into an ErrorDetails Object -->
    <int:transformer id="srcFileErrorFormatter" input-channel="sourceFileErrorChannel"
            output-channel="processSourceFileErrorChannel">
        <bean class="com.srchaven.siwa.errorhandling.transformers.ErrorDetailsBuilder" />
    </int:transformer>
    
    <int:channel id="processSourceFileErrorChannel" />

    <!-- Move source file to the error directory -->
    <int:service-activator id="sourceFileErrorHandler" input-channel="processSourceFileErrorChannel"
            output-channel="nullChannel">
        <bean class="com.srchaven.siwa.errorhandling.services.SourceFileErrorHandler">
            <property name="processingDirectory" value="${paths.processing}" />
            <property name="errorDirectory" value="${paths.error}" />
        </bean>
    </int:service-activator>
    <!-- END File-level error handling -->
    
    
    <!-- BEGIN Observation-level error handling -->
    <int:channel id="observationErrorChannel" />
    
    <!-- Convert the incoming object into an ErrorDetails Object -->
    <int:transformer id="obsErrorFormatter" input-channel="observationErrorChannel"
            output-channel="processObsErrorChannel">
        <bean class="com.srchaven.siwa.errorhandling.transformers.ErrorDetailsBuilder" />
    </int:transformer>

    <int:channel id="processObsErrorChannel" />

    <!-- Log the error -->
    <int:service-activator id="obsErrorHandler" input-channel="processObsErrorChannel"
            output-channel="sourceFileDeletionObservationAggregatorChannel">
        <bean class="com.srchaven.siwa.errorhandling.services.ObservationErrorHandler" />
    </int:service-activator>

    <!-- END Observation-level error handling -->

</beans>
